import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class UserController {

    // Assuming userService is a dependency that is properly autowired or injected
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @RequestMapping(value = "/user/{username}", method = RequestMethod.GET)
    public ResponseEntity<UserDTO> findUserByUserName(
            @PathVariable String username,
            @RequestHeader(value = Constants.HTTP_HEADER_CORRELATION_ID, required = true) String correlationId,
            @RequestHeader(value = Constants.HTTP_HEADER_APP_ID, required = false) String appId,
            @RequestHeader(value = Constants.HTTP_HEADER_CHANNEL_ID, required = false) String channelId) throws Exception {

        HttpHeaders headers = new HttpHeaders();
        headers.add("Correlation-ID", correlationId);

        UserDTO userDetailsDto = null;

        if (username.isBlank() || username.isEmpty()) {
            throw new InvalidUsernameException(Constants.INVALID_USERNAME);
        }

        try {
            if (username.contains("@")) {
                userDetailsDto = userService.getUserByQualifiedUserName(username + Constants.EXTERNAL);
            } else {
                userDetailsDto = userService.getUserByFirstName(username);
            }

            if (userDetailsDto == null) {
                throw new UserNotFoundException(Constants.USER_NOT_FOUND);
            }

            return new ResponseEntity<>(userDetailsDto, headers, HttpStatus.OK);

        } catch (InvalidUsernameException ex) {
            return new ResponseEntity<>(null, headers, HttpStatus.BAD_REQUEST); // Bad request for invalid username
        } catch (UserNotFoundException ex) {
            return new ResponseEntity<>(null, headers, HttpStatus.NOT_FOUND); // Not found for user not found
        } catch (Exception ex) {
            return new ResponseEntity<>(null, headers, HttpStatus.INTERNAL_SERVER_ERROR); // Internal server error for other exceptions
        }
    }
}
